# ----------------------------------------------------------------------------------------------------------------
# USER CONFIGURATION
# ----------------------------------------------------------------------------------------------------------------

# ============================== AWS ==============================
# You will need an AMI programatic user with full route 53 access and full s3 access.
AWS_ACCESS_KEY=<CHANGE_ME>
AWS_SECRET_KEY=<CHANGE_ME>

# ============================== Lightweight plugit proxy ==============================
# Postgres database password.
DATABASE_PASSWORD=<CHANGE_ME>

# Django secret key
SECRET_KEY=<CHANGE_ME>

# Super user username.
SU_NAME=<CHANGE_ME>

# Super user email.
SU_EMAIL=<CHANGE_ME>

# Super user password.
SU_PASSWORD=<CHANGE_ME>

# ============================== RadioDns ==============================
# Mysql database password for root user.
MYSQL_ROOT_PASSWORD=<CHANGE_ME>

# API secret. Random string defined by hand.
API_SECRET=<CHANGE_ME>

# Main domain of the manager. Example: free.staging-radiodns.com
MAIN_DOMAIN=<CHANGE_ME>

# ============================== Radio VIS ==============================
# The username of rabbitmq superuser.
RABBITMQ_USER=<CHANGE_ME>

# The password of rabbitmq superuser.
RABBITMQ_PASSWORD=<CHANGE_ME>

# Hostname where the Rabbitmq control pannel will be accessible
VIS_ADMIN_HOSTNAME=<CHANGE_ME>

# Endpoint to the VIS player of radiodns manager.
VIS_WEB_SOCKET_ENDPOINT_HOST=<CHANGE_ME>

# ----------------------------------------------------------------------------------------------------------------
# INNER CONFIGURATION
# ----------------------------------------------------------------------------------------------------------------
# If you don't know what you are doing better leave this part as it is.

# ============================== Common settings ==============================
# If true, debug messages will appear the radiodns manager will have less contraints for the client identifier feature.
DEBUG=False

# Max time to wait between database connection attempts. In seconds.
DATABASE_CONNECTION_MERCY_TIME=60

VIS_INTERNAL_HOST=vis_server

# ============================== Lightweight plugit proxy database ==============================
# Postgres user.
DATABASE_USER=root

# Postgres database name.
DATABASE_NAME=lpp

# ============================== Lightweight plugit proxy ==============================
# Port to listen to inside the docker container.
LPP_PORT=4000

# RadioDns url.
PLUGIT_APP_URL=http://dns_server:5000/

# Database host for the lightweight plugit proxy.
DATABASE_HOST=lpp_database

# Database posrt for the lightweight plugit proxy.
DATABASE_PORT=5432

# Django allowed hosts to connect to it. A list to provide of allowed hosts seperated by a comma. Example: "127.0.0.1,localhost"
ALLOWED_HOSTS=*

# ============================== RadioDNS database ==============================
# Mysql database name.
MYSQL_DATABASE=radiodns

# ============================== RadioDNS ==============================
# Port to listen to inside the docker container.
RADIO_DNS_PORT=5000

# Url to the lightweight plugit proxy (lpp).
API_URL=http://lpp:4000/

# XSI
XSISERVING_ENABLED=True

RADIOVIS_PORT=61613
RADIOEPG_PORT=80
RADIOTAG_PORT=80
RADIOSPI_PORT=443

# Enables the radio tag service.
RADIOTAG_ENABLED=False

# If true wont use any AWS ressources.
STANDALONE=False

# Allowed origin for this service.
PI_ALLOWED_NETWORKS=0.0.0.0/0

# logging options
FLASK_LOG_PATH=
FLASK_LOG_SIZE=

# Version of this service.
PI_API_VERSION=1.0.0

# Name of this service.
PI_API_NAME=RadioDns free from ebu.

# XML and IMGs chache max-age options (in seconds).
XML_CACHE_TIMEOUT=0
IMG_CACHE_TIMEOUT=0

# ============================== RadioVIS ==============================
# The host of rabbitmq inside the docker network.
RABBITMQ_HOST=rabbitmq

# The port of rabbitmq inside the docker network.
RABBITMQ_PORT=5672

# Namespace for VIS queues, exchanges and bindings.
RABBITMQ_VHOST=/

# If set to true will enable rabbitmq debug mode.
RABBITMQ_DEBUG=False

# VIS exchange type.
RABBITMQ_EXCHANGE=amq.fanout

# If true enables the monitoring of rabbitmq.
MONITORING_ENABLED=True

# The host where the monitoring service should connect. This is the rabbitmq instance inside the docker network.
MONITORING_HOST=rabbitmq

# The post where the monitoring service should connect.
MONITORING_PORT=5672

# Which VHOST the monitoring should watch.
MONITORING_VHOST=/

# If true enables the monitoring of rabbitmq.
MONITORING_DEBUG=False

# The monitoring exchange.
MONITORING_EXCHANGE=monitoring.buffer

# The monitoring queue.
MONITORING_QUEUE=radiovis

# Rabbitmq server id.
MONITORING_SERVER_ID=rabbit@radiodnsrabbitmq

# The allowed ips to connect to the stomp server. For example: 127.0.0.1,192.168.1.1
STOMP_IP=0.0.0.0

# The stmop server listening port.
STOMP_PORT=61613

# Max age for a cached RadioDns server VIS rest api response.
FB_CHANNEL_CACHE=60

# The fallback process queue.
FB_QUEUE=fallbacklogs

# The fallback check interval.
FB_FALLBACK_CHECK=15

# The time before a channel is considered dead
FB_FALLBACK_TIME=60

# Should be the public url of lpp.
FB_IMAGE_LOCATIONS=

# Cleanup logs if > 24h
FB_LOGS_MAX_AGE=86400

# Cleanup logs each 1h
FB_LOGS_CLEANUP=1200

# Memecached engine host inside the docker network.
MEMCACHED_HOST=memcached
