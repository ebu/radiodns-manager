from io import StringIO
from django.http import FileResponse
from django.shortcuts import render, redirect, get_object_or_404

from apps.channels.forms import ChannelForm
from apps.channels.models import Channel
from apps.clients.models import Client
from apps.localization.models import Ecc
from apps.stations.models import Station


def ListChannelsView(request):
    channels = Channel.objects.filter(
        station__organization__id=request.user.active_organization.id
    )
    return render(request, "channels/home.html", context={"channels": channels})


def EditChannelView(request, channel_id=None):
    channel = None
    if channel_id is not None:
        channel = get_object_or_404(
            Channel,
            id=channel_id,
            station__organization__id=request.user.active_organization.id,
        )
    countries = Ecc.objects.all()
    form = ChannelForm(instance=channel)
    if request.method == "POST":
        form = ChannelForm(request.POST, instance=channel)
        if form.is_valid():
            form.save()
            return redirect("channels:list")
    return render(
        request,
        "channels/edit.html",
        context={
            "form": form,
            "types_id": Channel.TYPE_ID_CHOICES,
            "stations": Station.all_stations_in_organization(
                request.user.active_organization.id
            ),
            "clients": Client.all_clients_in_organization(
                request.user.active_organization.id
            ),
            "countries": countries,
        },
    )


def DeleteChannelView(request, channel_id):
    channel = get_object_or_404(
        Channel,
        id=channel_id,
        station__organization__id=request.user.active_organization.id,
    )
    channel.delete()
    return redirect("channels:list")


def ExportChannelsView(request):
    """Export channels to zone file."""

    organization = request.user.active_organization
    export_data = ''

    export_data += '; GENERATED BY EBU RADIODNS MANAGER v2015\n'
    export_data += '; http://ebu.io/rdns\n\n'
    export_data += '; Service Provider  : ' + organization.medium_name + '\n'
    export_data += '; EBU Codops        : ' + organization.codops + '\n'
    export_data += '; Organization      : ' + organization.short_name + '\n'

    old_station_name = ''

    channels = Channel.objects.filter(station__organization__id=organization.id)
    dns_elements = [channel.dns_entry for channel in channels]
    for channel in channels:
        if channel.station_ascii_name != old_station_name:
            # If Channel Name changes output a new Station header
            export_data += '\n;;; Station: ' + channel.station_ascii_name + '\n'
            old_station_name = channel.station_ascii_name

        # Ignore IP Channels in Zone File
        if channel.type_id != 'id':
            # Add Entries for all channels in ns and iso format
            wildcard_elem = '*' + channel.dns_entry[channel.dns_entry.find('.'):]
            wildcards = [wildcard for wildcard in Channel.objects.all() if wildcard.dns_entry == wildcard_elem]
            if wildcard_elem not in dns_elements or channel.dns_entry == wildcard_elem:
                export_data += channel.dns_entry.ljust(40) + '\tIN\tCNAME\t' + channel.station.default_instance.fqdn + '\n'
                if channel.ecc_id:  # Output ISO version if element has ECC
                    export_data += channel.dns_entry_iso.ljust(40) + '\tIN\tCNAME\t' + channel.station.default_instance.fqdn + '\n'

    to = str(request.GET.get("to"))
    if to == "file":
        retour_str = StringIO()
        retour_str.write(str(export_data))
        retour_str.seek(0)
        response = FileResponse(export_data)
        response['Content-Disposition'] = 'attachment; filename="ebu-io-zone.txt"'
        return response

    return render(
        request,
        "channels/export.html",
        context={
            "export": export_data
        }
    )
